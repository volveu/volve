// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

enum Role {
    USER
    ADMIN
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String     @id @default(cuid())
    name               String?
    email              String?    @unique
    emailVerified      DateTime?
    image              String?
    aboutMe            String?
    phoneNum           String?
    password           String?
    role               Role       @default(USER)
    enrolledActivities Activity[]

    administrator Administrator?

    // next auth fields
    accounts Account[]
    sessions Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Administrator {
    admin   User   @relation(fields: [adminId], references: [id], onDelete: Cascade)
    adminId String @id

    createdActivities Activity[]

    @@index([adminId])
}

model Activity {
    id             String   @id @default(cuid())
    title          String // C
    description    String // C
    startTimestamp DateTime // C
    endTimestamp   DateTime // C
    isVisible      Boolean  @default(true)
    tags           Tag[] // should have another model for many-to-many relationship

    capacity Int? // C

    volunteers       User[] // should have another model for many-to-many relationship
    createdByAdmin   Administrator @relation(fields: [createdByAdminId], references: [adminId])
    createdByAdminId String // C

    primaryContactInfo String // C
    npo                Npo    @relation(fields: [npoId], references: [id])
    npoId              String // C

    @@index([createdByAdminId])
    @@index([npoId])
}

model Tag {
    title      String     @id
    activities Activity[]
}

model Npo {
    id          String  @id @default(cuid())
    name        String
    description String
    logo        String?
    website     String?

    activities Activity[]
}
